package TipsAndTricks.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import javax.swing.JComponent;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.MacrosFactory;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import javax.swing.JButton;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import java.awt.Component;
import javax.swing.SwingUtilities;
import javax.swing.JFrame;
import javax.swing.JFileChooser;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystems;
import org.jetbrains.mps.openapi.module.ModelAccess;
import java.awt.Dimension;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.util.MacroHelper;

public final class TT_Import__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xff3ef7856efd437aL, 0xb0d5407497433041L, 0xf5a66eb99311abcL, "TipsAndTricks.structure.TT_Import");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Boolean> isValid_idIb_Fk7zRKP = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isValid").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("Ib_Fk7zRKP").registry(REGISTRY).build();
  public static final SMethod<JComponent> createSelectFileButton_id4FdBKZ_bOwU = new SMethodBuilder<JComponent>(new SJavaCompoundTypeImpl(JComponent.class)).name("createSelectFileButton").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4FdBKZ_bOwU").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(SNode.class, ""), SMethodBuilder.createJavaParameter(SProperty.class, ""), SMethodBuilder.createJavaParameter(EditorContext.class, ""), SMethodBuilder.createJavaParameter(Boolean.TYPE, ""));
  public static final SMethod<JComponent> createSelectButton_idXqpIIpf2sK = new SMethodBuilder<JComponent>(new SJavaCompoundTypeImpl(JComponent.class)).name("createSelectButton").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("XqpIIpf2sK").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(SNode.class, ""), SMethodBuilder.createJavaParameter(SProperty.class, ""), SMethodBuilder.createJavaParameter(EditorContext.class, ""), SMethodBuilder.createJavaParameter(Boolean.TYPE, ""), SMethodBuilder.createJavaParameter((Class<_FunctionTypes._return_P1_E0<? extends String, ? super String>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<_FunctionTypes._return_P1_E0<? extends String, ? super String>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Boolean.TYPE, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(isValid_idIb_Fk7zRKP, createSelectFileButton_id4FdBKZ_bOwU, createSelectButton_idXqpIIpf2sK);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean isValid_idIb_Fk7zRKP(@NotNull SNode __thisNode__) {

    return new File(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0xff3ef7856efd437aL, 0xb0d5407497433041L, 0xf5a66eb99311abcL, 0xf5a66eb99311abdL, "file"))).isDirectory();
  }
  /*package*/ static JComponent createSelectFileButton_id4FdBKZ_bOwU(@NotNull SNode __thisNode__, final SNode sourceNode, final SProperty property, final EditorContext context, boolean copy) {
    final AbstractModule module = (AbstractModule) sourceNode.getModel().getModule();

    return ((JComponent) TT_Import__BehaviorDescriptor.createSelectButton_idXqpIIpf2sK.invoke(__thisNode__, sourceNode, property, context, ((boolean) true), new _FunctionTypes._return_P1_E0<String, String>() {
      public String invoke(String fullPath) {
        return check_j2sc8m_a0a4a2a1(MacrosFactory.forModule(module), fullPath);
      }
    }, new _FunctionTypes._return_P1_E0<String, String>() {
      public String invoke(String shortPath) {
        return check_j2sc8m_a0a5a2a1(MacrosFactory.forModule(module), shortPath);
      }
    }, ((boolean) copy)));
  }
  /*package*/ static JComponent createSelectButton_idXqpIIpf2sK(@NotNull SNode __thisNode__, final SNode sourceNode, final SProperty property, final EditorContext context, final boolean files, @NotNull final _FunctionTypes._return_P1_E0<? extends String, ? super String> shrinkPath, @NotNull _FunctionTypes._return_P1_E0<? extends String, ? super String> expandPath, final boolean copy) {
    String filename = expandPath.invoke(SNodeAccessUtil.getProperty(sourceNode, property));
    final File baseFile = (filename == null ? null : new File(filename));
    final JButton button = new JButton();
    button.setAction(new AbstractAction("...") {
      @Override
      public void actionPerformed(ActionEvent e) {
        Component root = SwingUtilities.getRoot(button);
        JFrame frame = (root instanceof JFrame ? (JFrame) root : null);

        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int resultCode = fileChooser.showDialog(frame, "Choose");
        if (resultCode != JFileChooser.APPROVE_OPTION || fileChooser.getSelectedFile() == null) {
          return;
        }

        IFile result = FileSystems.getDefault().getFile(fileChooser.getSelectedFile().getAbsolutePath());
        if (result == null) {
          return;
        }

        ModelAccess modelAccess = context.getRepository().getModelAccess();

        final String pathToShow = shrinkPath.invoke(result.getPath());
        modelAccess.executeCommand(new Runnable() {
          @Override
          public void run() {
            SNodeAccessUtil.setProperty(sourceNode, property, pathToShow);
          }
        });
      }
    });
    button.setPreferredSize(new Dimension(20, 20));
    return button;
  }

  /*package*/ TT_Import__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) isValid_idIb_Fk7zRKP(node));
      case 1:
        return (T) ((JComponent) createSelectFileButton_id4FdBKZ_bOwU(node, (SNode) parameters[0], (SProperty) parameters[1], (EditorContext) parameters[2], ((boolean) (Boolean) parameters[3])));
      case 2:
        return (T) ((JComponent) createSelectButton_idXqpIIpf2sK(node, (SNode) parameters[0], (SProperty) parameters[1], (EditorContext) parameters[2], ((boolean) (Boolean) parameters[3]), (_FunctionTypes._return_P1_E0<? extends String, ? super String>) parameters[4], (_FunctionTypes._return_P1_E0<? extends String, ? super String>) parameters[5], ((boolean) (Boolean) parameters[6])));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static String check_j2sc8m_a0a4a2a1(MacroHelper checkedDotOperand, String fullPath) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.shrinkPath(fullPath);
    }
    return null;
  }
  private static String check_j2sc8m_a0a5a2a1(MacroHelper checkedDotOperand, String shortPath) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.expandPath(shortPath);
    }
    return null;
  }
}
